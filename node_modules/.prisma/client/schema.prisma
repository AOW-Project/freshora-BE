// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  city      String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("customers")
}

model Service {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  description     String   @db.Text
  fullDescription String   @db.Text
  rating          Float    @default(5.0)
  reviews         Int      @default(0)
  duration        String
  image           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  items      ServiceItem[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("services")
}

model ServiceItem {
  id          String   @id @default(cuid())
  serviceId   String
  itemId      String
  category    String
  name        String
  description String?  @db.Text
  price       Float
  unit        String?
  image       String?
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  service    Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@unique([serviceId, itemId, category])
  @@map("service_items")
}

model Order {
  id                  String      @id @default(cuid())
  orderNumber         String      @unique
  customerId          String
  customer            Customer    @relation(fields: [customerId], references: [id])
  service             String
  totalAmount         Float
  status              OrderStatus @default(PENDING)
  notes               String?     @db.Text
  pickupDate          DateTime?
  deliveryDate        DateTime?
  specialInstructions String?     @db.Text
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  items         OrderItem[]
  statusHistory OrderStatusHistory[]

  @@map("orders")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())

  @@map("order_status_history")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  itemId      String
  itemName    String
  category    String
  serviceType String
  price       Float
  quantity    Int
  subtotal    Float
  createdAt   DateTime @default(now())

  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  serviceId     String
  serviceItem   ServiceItem @relation(fields: [serviceItemId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  serviceItemId String

  @@map("order_items")
}

model Cart {
  id        String     @id @default(cuid())
  sessionId String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id            String   @id @default(cuid())
  cartId        String
  serviceId     String
  serviceItemId String
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cart        Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  service     Service     @relation(fields: [serviceId], references: [id])
  serviceItem ServiceItem @relation(fields: [serviceItemId], references: [id])

  @@unique([cartId, serviceItemId])
  @@map("cart_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PICKED_UP
  IN_PROGRESS
  READY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}
